from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
    CallbackQueryHandler
)
from geopy.distance import geodesic
import sqlite3
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7984308901:AAEUVmO487YOEyWH2MJOCjN6aYQVvfwZkz0"
ADMIN_PASSWORD = "123"
MAX_DISTANCE = 100  # –î–æ–ø—É—Å—Ç–∏–º–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
ADMIN_ID = 660579475  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –°–æ—Å—Ç–æ—è–Ω–∏—è
USERNAME, PASSWORD, LOCATION, NAME, USER_SEARCH = range(5)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
conn = sqlite3.connect('checkins.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        full_name TEXT NOT NULL
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS user_settings (
        user_id INTEGER PRIMARY KEY,
        location_id INTEGER,
        FOREIGN KEY(location_id) REFERENCES locations(id)
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS locations (
        id INTEGER PRIMARY KEY,
        latitude REAL NOT NULL,
        longitude REAL NOT NULL,
        name TEXT UNIQUE NOT NULL
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS shifts (
        id INTEGER PRIMARY KEY,
        user_id INTEGER NOT NULL,
        start_time DATETIME NOT NULL,
        end_time DATETIME,
        duration INTEGER,
        FOREIGN KEY(user_id) REFERENCES users(user_id))
''')
conn.commit()

# ---------------------- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user = update.message.from_user
        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user.id,))

        if not cursor.fetchone():
            await update.message.reply_text("üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
            return USERNAME

        buttons = [
            [KeyboardButton("üìç –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É", request_location=True)],
            [KeyboardButton("üåç –í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é"), KeyboardButton("üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É")],
            [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ]
        keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
        return ConversationHandler.END

async def save_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –§–ò–û"""
    try:
        user = update.message.from_user
        full_name = update.message.text.strip()

        if len(full_name) < 2:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û!")
            return USERNAME

        cursor.execute('''
            INSERT INTO users (user_id, username, full_name)
            VALUES (?, ?, ?)
        ''', (user.id, user.username, full_name))
        conn.commit()

        await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return await start(update, context)

    except sqlite3.IntegrityError:
        await update.message.reply_text("‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –§–ò–û: {e}")
        return ConversationHandler.END

# ---------------------- –õ–æ–∫–∞—Ü–∏–∏ ----------------------
async def choose_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Ä–∞–±–æ—á–µ–π –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        cursor.execute("SELECT id, name FROM locations")
        locations = cursor.fetchall()

        if not locations:
            await update.message.reply_text("‚ùå –õ–æ–∫–∞—Ü–∏–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        buttons = [
            [InlineKeyboardButton(name, callback_data=f"loc_{id}")]
            for id, name in locations
        ]
        await update.message.reply_text(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—á—É—é –ª–æ–∫–∞—Ü–∏—é:",
            reply_markup=InlineKeyboardMarkup(buttons))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏: {e}")

async def location_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        query = update.callback_query
        await query.answer()
        loc_id = int(query.data.split("_")[1])
        user_id = query.from_user.id

        cursor.execute('''
            INSERT OR REPLACE INTO user_settings (user_id, location_id)
            VALUES (?, ?)
        ''', (user_id, loc_id))
        conn.commit()

        await query.edit_message_text("‚úÖ –õ–æ–∫–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏: {e}")

# ---------------------- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏ ----------------------
async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    try:
        user = update.message.from_user
        location = update.message.location

        cursor.execute('''
            SELECT l.latitude, l.longitude
            FROM user_settings us
            JOIN locations l ON us.location_id = l.id
            WHERE us.user_id = ?
        ''', (user.id,))
        office = cursor.fetchone()

        if not office:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é!")
            return

        user_coords = (location.latitude, location.longitude)
        distance = geodesic(user_coords, office).meters

        if distance > MAX_DISTANCE:
            await update.message.reply_text(f"‚ùå –í—ã –≤ {distance:.0f} –º –æ—Ç –æ–±—ä–µ–∫—Ç–∞!")
            return

        cursor.execute('''
            INSERT INTO shifts (user_id, start_time)
            VALUES (?, ?)
        ''', (user.id, datetime.now()))
        conn.commit()
        await update.message.reply_text("‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã: {e}")

async def end_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–º–µ–Ω—ã"""
    try:
        user = update.message.from_user

        cursor.execute('''
            SELECT id, start_time
            FROM shifts
            WHERE user_id = ? AND end_time IS NULL
        ''', (user.id,))
        shift = cursor.fetchone()

        if not shift:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã!")
            return

        end_time = datetime.now()
        start_time = datetime.strptime(shift[1], "%Y-%m-%d %H:%M:%S.%f")
        duration = int((end_time - start_time).total_seconds())

        cursor.execute('''
            UPDATE shifts
            SET end_time = ?, duration = ?
            WHERE id = ?
        ''', (end_time, duration, shift[0]))
        conn.commit()

        hours = duration // 3600
        minutes = (duration % 3600) // 60
        await update.message.reply_text(f"üõë –°–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours} —á {minutes} –º–∏–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã: {e}")

# ---------------------- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ----------------------
async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        user = update.message.from_user

        cursor.execute('''
            SELECT SUM(duration)
            FROM shifts
            WHERE user_id = ?
        ''', (user.id,))
        total_seconds = cursor.fetchone()[0] or 0

        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        await update.message.reply_text(f"üìä –í–∞—à–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours} —á {minutes} –º–∏–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    try:
        if update.message.from_user.id != ADMIN_ID:
            await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return

        cursor.execute('''
            SELECT
                u.full_name,
                s.start_time,
                s.end_time,
                s.duration
            FROM shifts s
            JOIN users u ON s.user_id = u.user_id
            ORDER BY s.start_time DESC
        ''')

        report = "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
        for row in cursor.fetchall():
            start_time = datetime.strptime(row[1], "%Y-%m-%d %H:%M:%S.%f").strftime("%d.%m %H:%M")
            end_time = datetime.strptime(row[2], "%Y-%m-%d %H:%M:%S.%f").strftime("%d.%m %H:%M") if row[2] else "‚ùå –ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            hours = row[3] // 3600 if row[3] else 0
            minutes = (row[3] % 3600) // 60 if row[3] else 0
            report += f"üë§ {row[0]}\nüïí {start_time} ‚Äì {end_time}\n‚è± {hours} —á {minutes} –º\n\n"

        await update.message.reply_text(report or "‚ùå –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# ---------------------- –ü–æ–∏—Å–∫ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º ----------------------
async def user_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É"""
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return ConversationHandler.END

    await update.message.reply_text("üîç –í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
    return USER_SEARCH

async def show_user_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–º–µ–Ω–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
    try:
        last_name = update.message.text.strip()
        logger.info(f"–ü–æ–∏—Å–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {last_name}")

        cursor.execute('''
            SELECT
                u.user_id,
                u.full_name,
                s.id,
                s.start_time,
                s.end_time,
                s.duration
            FROM users u
            LEFT JOIN shifts s ON u.user_id = s.user_id
            WHERE u.full_name LIKE ?
            ORDER BY s.start_time DESC
        ''', (f'%{last_name}%',))

        results = cursor.fetchall()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(results)}")

        if not results:
            await update.message.reply_text("‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return ConversationHandler.END

        report = []
        current_user = None
        total_shifts = 0
        total_duration = 0

        for row in results:
            user_id, full_name, shift_id, start_time, end_time, duration = row
            duration = duration or 0  # –û–±—Ä–∞–±–æ—Ç–∫–∞ NULL

            if current_user != user_id:
                if current_user is not None:
                    # –ò—Ç–æ–≥–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                    hours_total = total_duration // 3600
                    minutes_total = (total_duration % 3600) // 60
                    report.append(f"‚ñ´Ô∏è –í—Å–µ–≥–æ —Å–º–µ–Ω: {total_shifts}\n‚ñ´Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {hours_total} —á {minutes_total} –º\n‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n")

                current_user = user_id
                total_shifts = 0
                total_duration = 0
                report.append(f"üë§ *{full_name}* (ID: {user_id})\n")

            if shift_id:
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                try:
                    start_str = datetime.strptime(start_time, "%Y-%m-%d %H:%M:%S.%f").strftime("%d.%m %H:%M")
                    end_str = datetime.strptime(end_time, "%Y-%m-%d %H:%M:%S.%f").strftime("%d.%m %H:%M") if end_time else "–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                except:
                    start_str = "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"
                    end_str = "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞"

                hours = duration // 3600
                minutes = (duration % 3600) // 60

                report.append(
                    f"üìÖ –°–º–µ–Ω–∞ #{shift_id}\n"
                    f"üïí –ù–∞—á–∞–ª–æ: {start_str}\n"
                    f"üïí –û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_str}\n"
                    f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {hours} —á {minutes} –º\n"
                    f"‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï\n"
                )
                total_shifts += 1
                total_duration += duration

        # –î–æ–±–∞–≤–∏—Ç—å –∏—Ç–æ–≥–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if current_user is not None:
            hours_total = total_duration // 3600
            minutes_total = (total_duration % 3600) // 60
            report.append(f"‚ñ´Ô∏è –í—Å–µ–≥–æ —Å–º–µ–Ω: {total_shifts}\n‚ñ´Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {hours_total} —á {minutes_total} –º\n‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨\n")

        full_report = "".join(report)
        if len(full_report) > 4096:
            for part in [full_report[i:i+4096] for i in range(0, len(full_report), 4096)]:
                await update.message.reply_markdown(part)
        else:
            await update.message.reply_markdown(full_report)

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        return ConversationHandler.END

# ---------------------- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å ----------------------
async def add_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏"""
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return ConversationHandler.END

    await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")
    return PASSWORD

async def check_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"""
    if update.message.text != ADMIN_PASSWORD:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
        return ConversationHandler.END

    await update.message.reply_text("üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞:")
    return LOCATION

async def save_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    context.user_data['lat'] = update.message.location.latitude
    context.user_data['lon'] = update.message.location.longitude
    await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏:")
    return NAME

async def save_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        name = update.message.text.strip()
        lat = context.user_data['lat']
        lon = context.user_data['lon']

        if len(name) < 2:
            await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ!")
            return NAME

        cursor.execute('''
            INSERT INTO locations (latitude, longitude, name)
            VALUES (?, ?, ?)
        ''', (lat, lon, name))
        conn.commit()
        await update.message.reply_text(f"‚úÖ –õ–æ–∫–∞—Ü–∏—è '{name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        return ConversationHandler.END

    except sqlite3.IntegrityError:
        await update.message.reply_text("‚ùå –õ–æ–∫–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è: {e}")
        return ConversationHandler.END

# ---------------------- –ó–∞–ø—É—Å–∫ ----------------------
def main():
    app = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    user_stats_handler = ConversationHandler(
        entry_points=[CommandHandler('user_stats', user_stats)],
        states={
            USER_SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_user_stats)]
        },
        fallbacks=[]
    )

    reg_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            USERNAME: [MessageHandler(filters.TEXT, save_username)]
        },
        fallbacks=[]
    )

    add_loc_handler = ConversationHandler(
        entry_points=[CommandHandler('add', add_location)],
        states={
            PASSWORD: [MessageHandler(filters.TEXT, check_password)],
            LOCATION: [MessageHandler(filters.LOCATION, save_location)],
            NAME: [MessageHandler(filters.TEXT, save_name)]
        },
        fallbacks=[]
    )

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (–í–ê–ñ–ù–û: user_stats_handler –ø–µ—Ä–≤—ã–π!)
    app.add_handler(user_stats_handler)
    app.add_handler(reg_handler)
    app.add_handler(add_loc_handler)
    app.add_handler(CommandHandler("admin_stats", admin_stats))
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    app.add_handler(MessageHandler(filters.Regex(r"üåç –í—ã–±—Ä–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é"), choose_location))
    app.add_handler(MessageHandler(filters.Regex(r"üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É"), end_shift))
    app.add_handler(MessageHandler(filters.Regex(r"üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), show_stats))
    app.add_handler(CallbackQueryHandler(location_selected, pattern=r"^loc_"))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()